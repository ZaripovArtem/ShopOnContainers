version: '3.4'

networks:
  backend:

services:
  sqlservicedb:
    container_name: sqlservice-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=P@ssw0rd123#
    networks:
      - backend
    ports:
      - 8001:1433

  postgresqldb:
    container_name: postgresql-db
    image: postgres:latest
    ports:
      - "5432"
    restart: always
    volumes:
      - db_volume:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=bloguser
      - POSTGRES_PASSWORD=bloguser
      - POSTGRES_DB=customerdb
    networks:
      - backend

  mongodb:
    container_name: mongo-db
    image: mongo
    ports:
      - 8004:27017
    networks:
      - backend

  catalog.api:
    container_name: catalog-api
    image: ${DOCKER_REGISTRY-}catalogapi
    build:
      context: .
      dockerfile: src/Services/Catalog/Catalog.API/Dockerfile
    networks:
      - backend
    ports:
      - 8002:80
    environment:
      - DB_HOST=sqlservicedb
      - DB_NAME=shopOnContainer
      - DB_SA_PASSWORD=P@ssw0rd123#

  customer.api:
    container_name: customer-api
    image: postgres:latest
    networks:
      - backend
    build:
      context: .
      dockerfile: src/Services/Customer/Customer.API/Dockerfile
    depends_on:
      - postgresqldb
    ports:
      - 8003:80
    environment:
      - DB_HOST=postgresqldb
      - DB_NAME=customerdb
      - DB_USERNAME=bloguser
      - DB_PASSWORD=bloguser

  order.api:
    container_name: order-api
    image: ${DOCKER_REGISTRY-}orderapi
    build:
      context: .
      dockerfile: src/Services/Order/Order.API/Dockerfile
    ports:
      - 8005:80
    networks:
      - backend
    environment:
      - DB_HOST=mongodb
      - DB_NAME=order

volumes:
   db_volume: